{"ast":null,"code":"var _jsxFileName = \"/Users/jsmith/Development/code/phase-2/phase-2-project/src/components/Test.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Test() {\n  _s();\n  const [test, setTest] = useState(\"\");\n  console.log(test);\n  const [counter, setCounterState] = useState(\"0\");\n  function handleEntry(e) {\n    e.preventDefault();\n    setTest(e.target.value);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        onChange: handleEntry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      children: \"Click Me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 15,\n    columnNumber: 9\n  }, this);\n}\n_s(Test, \"hXRoy9Q6YENlbOPLMJg497/uKrs=\");\n_c = Test;\nexport default Test;\n\n// Create a controlled form that has a text input, \n\n// button that says click me and a counter that starts at 0. \n\n// Every time you hit submit when there is text in the \n// input box the counter should increment by the length of the string in \n// the input field and then the input field should reset.\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Test","_s","test","setTest","console","log","counter","setCounterState","handleEntry","e","preventDefault","target","value","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/jsmith/Development/code/phase-2/phase-2-project/src/components/Test.js"],"sourcesContent":["import React, {useState} from \"react\"\n\nfunction Test () {\n\n    const [test, setTest] = useState(\"\")\n    console.log(test)\n    const [counter, setCounterState] = useState(\"0\")\n\n    function handleEntry(e){\n        e.preventDefault()\n        setTest(e.target.value)\n    }\n\n    return (\n        <div>\n       <form >\n            <input \n                type=\"text\"\n                onChange={handleEntry}\n               \n            />\n        </form>\n        <button>Click Me</button>\n        <h1>{counter}</h1>\n\n\n        </div>\n\n    )\n}\n\nexport default Test\n\n// Create a controlled form that has a text input, \n\n\n \n// button that says click me and a counter that starts at 0. \n\n// Every time you hit submit when there is text in the \n// input box the counter should increment by the length of the string in \n// the input field and then the input field should reset."],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAErC,SAASC,IAAIA,CAAA,EAAI;EAAAC,EAAA;EAEb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGN,QAAQ,CAAC,EAAE,CAAC;EACpCO,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EACjB,MAAM,CAACI,OAAO,EAAEC,eAAe,CAAC,GAAGV,QAAQ,CAAC,GAAG,CAAC;EAEhD,SAASW,WAAWA,CAACC,CAAC,EAAC;IACnBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBP,OAAO,CAACM,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;EAC3B;EAEA,oBACIb,OAAA;IAAAc,QAAA,gBACDd,OAAA;MAAAc,QAAA,eACKd,OAAA;QACIe,IAAI,EAAC,MAAM;QACXC,QAAQ,EAAEP;MAAY;QAAAQ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAEzB;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACPpB,OAAA;MAAAc,QAAA,EAAQ;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eACzBpB,OAAA;MAAAc,QAAA,EAAKP;IAAO;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGb,CAAC;AAGd;AAAClB,EAAA,CA3BQD,IAAI;AAAAoB,EAAA,GAAJpB,IAAI;AA6Bb,eAAeA,IAAI;;AAEnB;;AAIA;;AAEA;AACA;AACA;AAAA,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}