{"ast":null,"code":"var _jsxFileName = \"/Users/jsmith/Development/code/phase-2/phase-2-project/src/components/Test.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Test() {\n  _s();\n  const [test, setTest] = useState(\"\");\n  console.log(test);\n  const [counter, setCounterState] = useState(\"0\");\n  function handleEntry(e) {\n    e.preventDefault();\n    setTest(e.target.value);\n  }\n  console.log(counter);\n  function handleSubmit() {\n    con;\n    setCounterState(test.length + counter);\n    setTest(\"\");\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"form\", {\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: test,\n        onChange: handleEntry\n        //    onSubmit={setCounterState(test.length)}\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleSubmit,\n      children: \"Click Me\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: counter\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 25,\n    columnNumber: 9\n  }, this);\n}\n_s(Test, \"hXRoy9Q6YENlbOPLMJg497/uKrs=\");\n_c = Test;\nexport default Test;\n\n// Create a controlled form that has a text input, \n\n// button that says click me and a counter that starts at 0. \n\n// Every time you hit submit when there is text in the \n// input box the counter should increment by the length of the string in \n// the input field and then the input field should reset.\nvar _c;\n$RefreshReg$(_c, \"Test\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","Test","_s","test","setTest","console","log","counter","setCounterState","handleEntry","e","preventDefault","target","value","handleSubmit","con","length","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","onClick","_c","$RefreshReg$"],"sources":["/Users/jsmith/Development/code/phase-2/phase-2-project/src/components/Test.js"],"sourcesContent":["import React, {useState, useEffect} from \"react\"\n\nfunction Test () {\n\n    const [test, setTest] = useState(\"\")\n    console.log(test)\n    \n    const [counter, setCounterState] = useState(\"0\")\n\n    function handleEntry(e){\n        e.preventDefault()\n        setTest(e.target.value)\n        \n    }\n\n    console.log(counter)\n\n    function handleSubmit() {\n        con\n        setCounterState(test.length + counter)\n        setTest(\"\")\n    }\n\n    return (\n        <div>\n       <form >\n            <input \n                type=\"text\"\n                value={test}\n                onChange={handleEntry}\n            //    onSubmit={setCounterState(test.length)}\n            />\n        </form>\n        <button onClick={handleSubmit}>Click Me</button>\n        <h1>{counter}</h1>\n\n\n        </div>\n\n    )\n}\n\nexport default Test\n\n// Create a controlled form that has a text input, \n\n\n \n// button that says click me and a counter that starts at 0. \n\n// Every time you hit submit when there is text in the \n// input box the counter should increment by the length of the string in \n// the input field and then the input field should reset."],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,EAAEC,SAAS,QAAO,OAAO;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEhD,SAASC,IAAIA,CAAA,EAAI;EAAAC,EAAA;EAEb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EACpCQ,OAAO,CAACC,GAAG,CAACH,IAAI,CAAC;EAEjB,MAAM,CAACI,OAAO,EAAEC,eAAe,CAAC,GAAGX,QAAQ,CAAC,GAAG,CAAC;EAEhD,SAASY,WAAWA,CAACC,CAAC,EAAC;IACnBA,CAAC,CAACC,cAAc,CAAC,CAAC;IAClBP,OAAO,CAACM,CAAC,CAACE,MAAM,CAACC,KAAK,CAAC;EAE3B;EAEAR,OAAO,CAACC,GAAG,CAACC,OAAO,CAAC;EAEpB,SAASO,YAAYA,CAAA,EAAG;IACpBC,GAAG;IACHP,eAAe,CAACL,IAAI,CAACa,MAAM,GAAGT,OAAO,CAAC;IACtCH,OAAO,CAAC,EAAE,CAAC;EACf;EAEA,oBACIJ,OAAA;IAAAiB,QAAA,gBACDjB,OAAA;MAAAiB,QAAA,eACKjB,OAAA;QACIkB,IAAI,EAAC,MAAM;QACXL,KAAK,EAAEV,IAAK;QACZgB,QAAQ,EAAEV;QACd;MAAA;QAAAW,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC,eACPvB,OAAA;MAAQwB,OAAO,EAAEV,YAAa;MAAAG,QAAA,EAAC;IAAQ;MAAAG,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAQ,CAAC,eAChDvB,OAAA;MAAAiB,QAAA,EAAKV;IAAO;MAAAa,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGb,CAAC;AAGd;AAACrB,EAAA,CAtCQD,IAAI;AAAAwB,EAAA,GAAJxB,IAAI;AAwCb,eAAeA,IAAI;;AAEnB;;AAIA;;AAEA;AACA;AACA;AAAA,IAAAwB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}